#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import ipaddr
import os
import subprocess
import sys
import time

try:
    import simplejson
except ImportError:
    import json as simplejson

from elasticsearch import Elasticsearch, TransportError
from elasticsearch.client import NodesClient
from subprocess import CalledProcessError


# Helper functions go here
def cluster_health():
    es = Elasticsearch(args.server)
    return es.cluster.health()["status"]


def cluster_status(columns=None):
    es = Elasticsearch(args.server)
    cluster_health = es.cluster.health()
    if columns is None:
        columns = sorted(cluster_health)
    values = [cluster_health[x] for x in columns]

    column_fmt = ' '.join('{:>}' for x in columns)
    value_fmt = ' '.join('{:>%s}' % len(x) for x in columns)

    yield column_fmt.format(*columns)
    yield value_fmt.format(*values)


def set_setting(setting, value, settingtype="transient"):
        es = Elasticsearch(args.server)
        res = es.cluster.put_settings(
            body={
                settingtype: {
                    setting: value
                }
            }
        )
        if res["acknowledged"]:
            return True
        else:
            return False


def set_allocation_state(status):
    return set_setting("cluster.routing.allocation.enable", status)


def set_banned_nodes(nodelist, node_type):
    return set_setting("cluster.routing.allocation.exclude." + node_type,
                       ",".join(nodelist))


def get_banned_nodes(node_type):
    es = Elasticsearch(args.server)
    res = es.cluster.get_settings()
    try:
        bannedstr = res["transient"]["cluster"]["routing"]["allocation"][
            "exclude"][node_type]
        if bannedstr:
            return bannedstr.split(",")
    except KeyError:
        pass
    return []


def get_node_type(node):
    try:
        ipaddr.IPv4Address(node)
        return "_ip"
    except ipaddr.AddressValueError:
        try:
            ipaddr.IPv6Address(node)
            return "_ip"
        except ipaddr.AddressValueError:
            return "_host"


def get_node_stats():
    es = Elasticsearch(args.server)
    nodes = NodesClient(es)
    res = nodes.stats()
    try:
        return res
    except KeyError:
        pass
    return []
    
            
def jsonpipe(obj, pathsep='.', path=()):

    """
    Generate a jsonpipe stream for the provided (parsed) JSON object.

    This generator will yield output as UTF-8-encoded bytestrings line-by-line.
    These lines will *not* be terminated with line ending characters.

    The provided object can be as complex as you like, but it must consist only
    of:

    *   Dictionaries (or subclasses of `dict`)
    *   Lists or tuples (or subclasses of the built-in types)
    *   Unicode Strings (`unicode`, utf-8 encoded `str`)
    *   Numbers (`int`, `long`, `float`)
    *   Booleans (`True`, `False`)
    *   `None`

    Please note that, where applicable, *all* input must use either native
    Unicode strings or UTF-8-encoded bytestrings, and all output will be UTF-8
    encoded.

    The simplest case is outputting JSON values (strings, numbers, booleans and
    nulls):

        >>> def pipe(obj): # Shim for easier demonstration.
        ...     print '\n'.join(jsonpipe(obj))
        >>> pipe(u"Hello, World!")
        /	"Hello, World!"
        >>> pipe(123)
        /	123
        >>> pipe(0.25)
        /	0.25
        >>> pipe(None)
        /	null
        >>> pipe(True)
        /	true
        >>> pipe(False)
        /	false

    jsonpipe always uses '/' to represent the top-level object. Dictionaries
    are displayed as ``{}``, with each key shown as a sub-path:

        >>> pipe({"a": 1, "b": 2})
        /	{}
        /a	1
        /b	2

    Lists are treated in much the same way, only the integer indices are used
    as the keys, and the top-level list object is shown as ``[]``:

        >>> pipe([1, "foo", 2, "bar"])
        /	[]
        /0	1
        /1	"foo"
        /2	2
        /3	"bar"

    Finally, the practical benefit of using hierarchical paths is that the
    syntax supports nesting of arbitrarily complex constructs:

        >>> pipe([{"a": [{"b": {"c": ["foo"]}}]}])
        /	[]
        /0	{}
        /0/a	[]
        /0/a/0	{}
        /0/a/0/b	{}
        /0/a/0/b/c	[]
        /0/a/0/b/c/0	"foo"

    Because the sole separator of path components is a ``/`` character by
    default, keys containing this character would result in ambiguous output.
    Therefore, if you try to write a dictionary with a key containing the path
    separator, :func:`jsonpipe` will raise a :exc:`ValueError`:

        >>> pipe({"a/b": 1})
        Traceback (most recent call last):
        ...
        ValueError: Path separator '/' present in key 'a/b'

    In more complex examples, some output may be written before the exception
    is raised. To mitigate this problem, you can provide a custom path
    separator:

        >>> print '\n'.join(jsonpipe({"a/b": 1}, pathsep=':'))
        :	{}
        :a/b	1

    The path separator should be a bytestring, and you are advised to use
    something you are almost certain will not be present in your dictionary
    keys.
    """

    def output(string):
        return pathsep + pathsep.join(path) + "\t" + string + "\t" + str(int(time.time()))

    if is_value(obj):
        yield output(simplejson.dumps(obj))
        raise StopIteration # Stop the generator immediately.
    elif isinstance(obj, dict):
        #yield output('{}')
        iterator = obj.iteritems()
    elif hasattr(obj, '__iter__'):
        #yield output('[]')
        iterator = enumerate(obj)
    else:
        raise TypeError("Unsupported type for jsonpipe output: %r" %
                        type(obj))

    for key, value in iterator:
        # Check the key for sanity.
        key = to_str(key)
        if pathsep in key:
            # In almost any case this is not what the user wants; having
            # the path separator in the key would create ambiguous output
            # so we should fail loudly and as quickly as possible.
            raise ValueError("Path separator %r present in key %r" %
                             (pathsep, key))

        for line in jsonpipe(value, pathsep=pathsep, path=path + (key,)):
            yield line


def to_str(obj):

    """
    Coerce an object to a bytestring, utf-8-encoding if necessary.

        >>> to_str("Hello World")
        'Hello World'
        >>> to_str(u"H\xe9llo")
        'H\xc3\xa9llo'
    """

    if isinstance(obj, unicode):
        return obj.encode('utf-8')
    elif hasattr(obj, '__unicode__'):
        return unicode(obj).encode('utf-8')
    return str(obj)


def is_value(obj):

    """
    Determine whether an object is a simple JSON value.

    The phrase 'simple JSON value' here means one of:

    *   String (Unicode or UTF-8-encoded bytestring)
    *   Number (integer or floating-point)
    *   Boolean
    *   `None`
    """

    return isinstance(obj, (str, unicode, int, long, float, bool, type(None)))


# Add new command functions here
def es_ban_node():
    if args.node == "":
        print "No node provided"
        return os.EX_UNAVAILABLE

    node_type = get_node_type(args.node)

    banned = get_banned_nodes(node_type)
    if args.node in banned:
        print args.node + " already banned from allocation, nothing to do"
        return os.EX_OK

    banned.append(args.node)
    if set_banned_nodes(banned, node_type):
        print "Banned " + args.node
        return os.EX_OK
    else:
        print "Failed to ban " + args.node
        return os.EX_UNAVAILABLE


def es_health():
    health = cluster_health()
    print health
    if health != "green":
        return os.EX_UNAVAILABLE
    else:
        return os.EX_OK


def printu(string):
    sys.stdout.write(string)
    sys.stdout.flush()


def es_restart_fast():
    # Sanity checks
    if os.getuid() != 0:
        print "Must be run as root"
        return os.EX_UNAVAILABLE
    if args.server != "localhost":
        print "Must be run against localhost only"
        return os.EX_UNAVAILABLE

    # Disable replication so we can make recovery easier
    printu("Disabling non-primary replication...")
    if not set_allocation_state("primaries"):
        print "failed!"
        return os.EX_UNAVAILABLE
    printu("ok\n")

    # Actually restart the service
    try:
        subprocess.check_call(["service", "elasticsearch", "restart"])
    except CalledProcessError:
        print "failed! -- You will still need to enable replication again",
        print "with `es-tool start-replication`"
        return os.EX_UNAVAILABLE

    # Wait for it to come back alive
    printu("Waiting for Elasticsearch...")
    while True:
        try:
            if cluster_health():
                printu("ok\n")
                break
        except:
            pass
        printu(".")
        time.sleep(1)

    # Wait a sec
    time.sleep(1)

    # Turn replication back on so things will recover fully
    printu("Enabling all replication...")
    if not set_allocation_state("all"):
        print "failed! -- You will still need to enable replication again",
        print "with `es-tool start-replication`"
        return os.EX_UNAVAILABLE
    printu("ok\n")

    # Wait a bit
    time.sleep(5)
    print "Waiting for green (you can ctrl+c here if you have to)...\n"
    while cluster_health() != "green":
        print '\n'.join(cluster_status(columns=('status',
                                                'initializing_shards',
                                                'relocating_shards',
                                                'unassigned_shards')))
        time.sleep(60)
    print "ok"

    return os.EX_OK


def es_start_replication():
    if set_allocation_state("all"):
        print "All replication enabled"
        return os.EX_OK
    else:
        print "Failed to set replication state"
        return os.EX_UNAVAILABLE


def es_stop_replication():
    if set_allocation_state("primaries"):
        print "Non-primary replication disabled"
        return os.EX_OK
    else:
        print "Failed to set replication state"
        return os.EX_UNAVAILABLE


def es_unban_node():
    if args.node == "":
        print "No node provided"
        return os.EX_UNAVAILABLE

    node_type = get_node_type(args.node)

    banned = get_banned_nodes(node_type)
    if args.node not in banned:
        print args.node + " not banned from allocation, nothing to do"
        return os.EX_OK

    banned.remove(args.node)
    if set_banned_nodes(banned, node_type):
        print "Unbanned " + args.node
        return os.EX_OK
    else:
        print "Failed to unban " + args.node
        return os.EX_UNAVAILABLE


def es_dump_node_stats():
    node_stats = get_node_stats()
    for line in jsonpipe(node_stats):
        print line
    return os.EX_OK


# And register them here
commands = {
    "ban-node": es_ban_node,
    "health": es_health,
    "restart-fast": es_restart_fast,
    "start-replication": es_start_replication,
    "stop-replication": es_stop_replication,
    "unban-node": es_unban_node,
    "metrics-nodes": es_dump_node_stats,
    "status": lambda: '\n'.join(cluster_status()),
}

# main()
parser = argparse.ArgumentParser(
    description="Tool for Elasticsearch cluster maintenance")
parser.add_argument("command", metavar='CMD', type=str,
                    choices=commands.keys(),
                    help="Subcommand, one of: " + ",".join(commands))
parser.add_argument("node", metavar='NODE', type=str, nargs="?", default="",
                    help="IP address or hostname, used by (un)ban-node")
parser.add_argument("--server", metavar='S', type=str, default="localhost",
                    help="Server to work on, default localhost")
args = parser.parse_args()

try:
    sys.exit(commands[args.command]())
except TransportError as te:
    print te
    sys.exit(os.EX_UNAVAILABLE)
